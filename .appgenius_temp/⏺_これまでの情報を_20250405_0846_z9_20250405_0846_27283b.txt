⏺ これまでの情報を整理して、会話システム統一の具体的な実装計画を立てます。

⏺ Read(backend/src/infrastructure/external/ClaudeAIService.ts)…
  ⎿  Read 327 lines (ctrl+r to expand)

⏺ 会話システム統一実装計画

  1. 現状分析と課題

  現在、会話システムは2つの異なる実装が存在します：

  1. direct-chat.ts（直接会話エンドポイント）
    - /api/v1/direct-conversations エンドポイントを提供
    - SystemMessageBuilderServiceを使用して四柱推命情報を含むメッセージを構築
    - ユーザーIDやコンテキストに基づき、適切なプロンプトを生成
    - フロントエンドでは DirectChatInterface.tsx と useDirectConversation フックで利用
  2. conversation.controller.ts（標準会話API）
    - /api/v1/conversations エンドポイントを提供
    - ConversationServiceを使用して会話を永続化
    - モックレスポンスを返す制限された機能（本番で実際のAI応答を返していない）

  課題：
  - 機能の重複と分断
  - 一貫したユーザー体験の欠如
  - 保守性の低下
  - リソースの非効率的な使用

  2. 統合アプローチ

  direct-chat.tsの機能をベースとして、conversation.controller.tsの会話永続化機能を統合します。

  統合ステップ：

  1. 新しいUnifiedConversationServiceの設計と実装
    - direct-chatの会話処理とSystemMessageBuilderの機能を活用
    - conversation.serviceの永続化機能を統合
    - リアルタイムストリーミングサポートを維持
  2. エンドポイント統合
    - /api/v1/direct-conversations を主要エンドポイントとして維持
    - /api/v1/conversations からの段階的移行パスを確保（互換モード）
  3. フロントエンド更新
    - 既存の直接会話関連コンポーネントを使用（DirectChatInterface.tsx）
    - useDirectConversationフックを強化して互換性を確保

  3. 実装詳細

  タスク 3.1: 統合サービスクラスの実装（2日）

  // unified-conversation.service.ts
  @injectable()
  export class UnifiedConversationService {
    constructor(
      @inject('IConversationRepository') private conversationRepository: any,
      @inject('SystemMessageBuilderService') private systemMessageBuilder: SystemMessageBuilderService,
      @inject('IAIService') private aiService: IAIService
    ) {}

    // 以下の機能を実装:
    // 1. 会話の初期化と取得
    // 2. メッセージ送信（ストリーミング/非ストリーミング）
    // 3. 会話の永続化
    // 4. 履歴の取得と管理
  }

  リスク対策:
  - 既存データへの影響を最小化するため、データモデルの互換性を保持
  - テスト環境での徹底検証
  - フォールバックメカニズムの実装（一時的な両システム維持）

  タスク 3.2: 新コントローラの実装（1日）

  // unified-conversation.controller.ts
  @injectable()
  export class UnifiedConversationController {
    constructor(
      @inject('UnifiedConversationService') private conversationService: UnifiedConversationService
    ) {}

    // 以下のエンドポイントを実装:
    // 1. 会話開始/継続（POST /api/v1/direct-conversations）
    // 2. 会話履歴取得（GET /api/v1/direct-conversations/:id）
    // 3. 会話削除（DELETE /api/v1/direct-conversations/:id）
    // 4. 互換性エンドポイント（/api/v1/conversations へのリダイレクト）
  }

  タスク 3.3: エラーハンドリングとデータ検証強化（1日）

  // conversation-validator.service.ts
  @injectable()
  export class ConversationValidatorService {
    validateUserRequest(data: any): ValidationResult {
      // リクエストデータの検証
    }

    validateSystemContext(context: SystemMessageContext): ValidationResult {
      // システムコンテキストの検証
    }
  }

  タスク 3.4: ストリーミングハンドリングの最適化（1日）

  // streaming-response-handler.ts
  export class StreamingResponseHandler {
    // ストリーミングレスポンスの処理に特化したメソッド
  }

  4. 移行戦略

  フェーズ1: 新機能の段階的リリース (3日)

  1. UnifiedConversationServiceの実装
  2. エンドポイントの維持（既存のものを変更せず）
  3. 限定ユーザーに新機能をテスト提供

  フェーズ2: 新旧API並行運用 (2日)

  1. 古いエンドポイントからの転送処理実装
  2. フロントエンド修正リリース
  3. 移行確認と問題対応

  フェーズ3: 完全移行 (1日)

  1. レガシーコードの削除
  2. パフォーマンス最適化
  3. ドキュメント更新

  5. テスト戦略

  1. 単体テスト
    - UnifiedConversationServiceの個々のメソッド
    - コンテキスト構築ロジック
    - データ検証
  2. 統合テスト
    - エンドポイント全体の機能
    - ユースケースシナリオ
    - エラーケース
  3. 回帰テスト
    - 既存機能が引き続き動作することを確認
    - 互換性の検証

  6. マイルストーン

  1. マイルストーン1（2日目）: 統合サービスの基本実装完了
  2. マイルストーン2（4日目）: エンドポイント統合とエラーハンドリング強化
  3. マイルストーン3（6日目）: テスト完了とフロントエンド統合
  4. マイルストーン4（8日目）: 全面展開と古いAPIの廃止

  7. 成功指標

  1. ゼロダウンタイムでの移行
  2. APIレスポンスタイムの改善（目標：20%高速化）
  3. エラー率の低下（目標：50%削減）
  4. コード重複の解消（目標：80%削減）

  8. ドキュメント計画

  1. API仕様書の更新
  2. 内部実装ドキュメントの作成
  3. マイグレーションガイドの提供

  この計画に従って、8日間で会話システムの統一を行います。進捗と問題は日次で報告し、必要に応じて計画を調整します。