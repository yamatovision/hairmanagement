次期実装計画

  優先タスク（フェーズ2完了のため）

  1. 会話システムの統一
    - backend/src/interfaces/http/controllers/conversation.controller.ts - direct-chatとconversation-controllerの統合
    - 目標: フロントエンドとバックエンドの会話機能を一貫したものにする
    - アプローチ:
        - direct-chatをベースに機能を統合
      - conversation.controllerの機能をマージ
      - APIエンドポイントを/api/v1/direct-conversationsに統一
  2. データ検証とエラーハンドリング強化
    - 型安全な中間表現の定義
    - 四柱推命データフローにおけるデータ検証を強化
    - null/undefined/矛盾データの適切な処理
    - 環境別のエラーハンドリング戦略（開発環境と本番環境の分離）
  3. 四柱推命データフローのテスト実装
    - 正常系と異常系を含む網羅的なテスト
    - エラーケースの確実な捕捉
    - 境界条件のテスト（年月日の変わり目や特殊な暦日など）

  次のステップ（フェーズ3継続）

  1. AI プロンプト生成サービスの実装
    - backend/src/application/services/ai-prompt-generation.service.ts
    - 四柱推命データを考慮した最適なプロンプト生成
    - SystemMessageBuilderServiceとの連携
  2. 性能最適化
    - 運勢計算プロセスのメモ化実装
    - 頻繁に使用される変換処理のキャッシュ戦略
    - 非同期処理の最適化
  3. トレーサビリティ改善
    - 体系的なロギングシステムの実装
    - 変換処理のトレース機能
    - デバッグモードの実装

  具体的なアクション項目

  1. 会話システムの統一 (3-4日)
    - 現状の両システムの機能比較分析
    - 統合アーキテクチャの設計
    - コントローラーの統合実装
    - ルート設定の更新
    - フロントエンドの接続部分の更新
    - 統合テスト実施
  2. データ検証とエラーハンドリング強化 (2-3日)
    - データモデル検証の共通ユーティリティ実装
    - バリデーションスキーマの定義
    - エラーハンドリング戦略の文書化
    - 主要サービスへのバリデーション組み込み
  3. テスト実装 (3-4日)
    - テストケース設計（約30-40ケース）
    - ユニットテスト実装
    - 統合テスト実装
    - エンドツーエンドシナリオテスト
  4. パフォーマンス最適化 (2-3日)
    - パフォーマンス測定ベースラインの確立
    - ボトルネック分析
    - キャッシュ戦略実装
    - 最適化効果の検証

  優先順位付け

  1. 会話システムの統一（フェーズ2からの継続で最優先）
  2. データ検証とエラーハンドリング強化（品質向上のため）
  3. テスト実装（バグの早期発見と品質確保）
  4. パフォーマンス最適化（ユーザー体験向上）

  この計画に従って進めることで、フェーズ2を完了し、フェーズ3を大きく前進させることができます。合計で約10-14日の作業となりますが、これにより、システムの安定性、品質、パフォーマンスが大幅に向上します。