FROM node:18-alpine

WORKDIR /app

# 必要なパッケージのインストール
RUN npm init -y && npm install express cors mongoose jsonwebtoken

# シンプルなサーバーアプリを作成
COPY <<EOF /app/index.js
const express = require('express');
const cors = require('cors');
const app = express();
const port = process.env.PORT || 8080;
const apiPrefix = process.env.API_PREFIX || '/api';
const apiVersion = process.env.API_VERSION || 'v1';
const fullApiPrefix = \`\${apiPrefix}/\${apiVersion}\`;

// MongoDB接続設定
let mongoose;
let dbConnected = false;
const connectToDB = async () => {
  if (process.env.SKIP_DB === 'true') {
    console.log('⚠️ データベース接続をスキップします（SKIP_DB=true）');
    return;
  }
  
  try {
    mongoose = require('mongoose');
    await mongoose.connect(process.env.DB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('📊 MongoDB接続成功');
    dbConnected = true;
  } catch (error) {
    if (process.env.SKIP_DB_ERRORS === 'true') {
      console.log('⚠️ データベース接続エラーをスキップします（SKIP_DB_ERRORS=true）');
      console.error('エラー詳細:', error);
    } else {
      console.error('❌ データベース接続エラー:', error);
      process.exit(1);
    }
  }
};

// ミドルウェア
app.use(cors({ 
  origin: process.env.CORS_ORIGIN || '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true // クレデンシャル付きリクエストを許可
}));
app.use(express.json());

// リクエストロギング
if (process.env.ENABLE_REQUEST_LOGGING === 'true') {
  app.use((req, res, next) => {
    const start = Date.now();
    res.on('finish', () => {
      const duration = Date.now() - start;
      console.log(\`\${req.method} \${req.originalUrl} \${res.statusCode} \${duration}ms\`);
    });
    next();
  });
}

// ヘルスチェック（Cloud Run用）
app.get('/healthz', (req, res) => {
  console.log('健康チェックリクエスト受信');
  res.status(200).send('OK');
});

// APIバージョン情報
app.get('/', (req, res) => {
  res.json({ 
    name: 'パトロールマネジメント API',
    description: '陰陽五行の原理に基づいた運勢分析と組織マネジメントAPI',
    status: 'ok',
    version: '1.0.0',
    apiPrefix: fullApiPrefix,
    environment: process.env.NODE_ENV,
    timestamp: new Date().toISOString(),
    dbConnected
  });
});

// 認証エンドポイント（モック）
app.post(\`\${fullApiPrefix}/auth/login\`, (req, res) => {
  console.log('ログインリクエスト:', req.body);
  // モックデータを返す
  res.json({
    success: true,
    message: 'ログイン成功',
    data: {
      user: {
        id: 'user123',
        name: 'テストユーザー',
        email: req.body.email || 'test@example.com',
        role: 'user',
        element: {
          main: '木',
          secondary: '水'
        },
        createdAt: new Date().toISOString()
      },
      token: 'mock-jwt-token-12345'
    }
  });
});

// ユーザー情報エンドポイント
app.get(\`\${fullApiPrefix}/auth/me\`, (req, res) => {
  // モックデータを返す
  res.json({
    success: true,
    data: {
      id: 'user123',
      name: 'テストユーザー',
      email: 'test@example.com',
      role: 'user',
      element: {
        main: '木',
        secondary: '水'
      },
      createdAt: new Date().toISOString()
    }
  });
});

// ログアウトエンドポイント
app.post(\`\${fullApiPrefix}/auth/logout\`, (req, res) => {
  res.json({
    success: true,
    message: 'ログアウト成功'
  });
});

// 運勢エンドポイント
app.get(\`\${fullApiPrefix}/fortune/daily\`, (req, res) => {
  // モックデータを返す
  res.json({
    date: new Date().toISOString().split('T')[0],
    element: {
      day: "火",
      month: "木", 
      year: "水"
    },
    fortune: {
      overall: 85,
      work: 80,
      relationship: 90,
      health: 85
    },
    advice: "今日は積極的なコミュニケーションが幸運を呼び込みます。新しいアイデアを共有しましょう。",
    luckyColor: "赤",
    luckyDirection: "南",
    compatibleElement: "木"
  });
});

// 範囲運勢エンドポイント
app.get(\`\${fullApiPrefix}/fortune/range\`, (req, res) => {
  const { startDate, endDate } = req.query;
  
  if (!startDate || !endDate) {
    return res.status(400).json({ error: "開始日と終了日は必須です" });
  }
  
  // モックデータを返す
  const days = Math.ceil((new Date(endDate as string).getTime() - new Date(startDate as string).getTime()) / (1000 * 60 * 60 * 24)) + 1;
  const fortunes = [];
  
  for (let i = 0; i < days; i++) {
    const date = new Date(startDate as string);
    date.setDate(date.getDate() + i);
    
    fortunes.push({
      date: date.toISOString().split('T')[0],
      dailyElement: ["木", "火", "土", "金", "水"][Math.floor(Math.random() * 5)],
      yinYang: Math.random() > 0.5 ? "陰" : "陽",
      overallLuck: 50 + Math.floor(Math.random() * 50),
      careerLuck: 50 + Math.floor(Math.random() * 50),
      relationshipLuck: 50 + Math.floor(Math.random() * 50),
      creativeEnergyLuck: 50 + Math.floor(Math.random() * 50),
      healthLuck: 50 + Math.floor(Math.random() * 50),
      wealthLuck: 50 + Math.floor(Math.random() * 50),
      description: "この日は調和のとれた一日となるでしょう。",
      advice: "バランスを意識して行動しましょう。",
      luckyColors: ["青", "緑"],
      luckyDirections: ["東", "南"],
      compatibleElements: ["水", "木"],
      incompatibleElements: ["火", "金"]
    });
  }
  
  res.json(fortunes);
});

// 週間運勢エンドポイント
app.get(\`\${fullApiPrefix}/fortune/weekly\`, (req, res) => {
  const { startDate } = req.query;
  const start = startDate || new Date().toISOString().split('T')[0];
  
  // 終了日（7日後）
  const end = new Date(start as string);
  end.setDate(end.getDate() + 6);
  const endDate = end.toISOString().split('T')[0];
  
  // /fortune/range を呼び出すリダイレクト
  req.query.endDate = endDate;
  const fortunes = [];
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(start as string);
    date.setDate(date.getDate() + i);
    
    fortunes.push({
      date: date.toISOString().split('T')[0],
      dailyElement: ["木", "火", "土", "金", "水"][Math.floor(Math.random() * 5)],
      yinYang: Math.random() > 0.5 ? "陰" : "陽",
      overallLuck: 50 + Math.floor(Math.random() * 50),
      careerLuck: 50 + Math.floor(Math.random() * 50),
      relationshipLuck: 50 + Math.floor(Math.random() * 50),
      creativeEnergyLuck: 50 + Math.floor(Math.random() * 50),
      healthLuck: 50 + Math.floor(Math.random() * 50),
      wealthLuck: 50 + Math.floor(Math.random() * 50),
      description: "この日は調和のとれた一日となるでしょう。",
      advice: "バランスを意識して行動しましょう。",
      luckyColors: ["青", "緑"],
      luckyDirections: ["東", "南"],
      compatibleElements: ["水", "木"],
      incompatibleElements: ["火", "金"]
    });
  }
  
  res.json(fortunes);
});

// 会話エンドポイント
app.post(\`\${fullApiPrefix}/conversation\`, (req, res) => {
  const { message } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: "メッセージを入力してください" });
  }
  
  // モック応答
  res.json({
    id: "conv_" + Date.now(),
    message: "ありがとうございます。お役に立てて嬉しいです。他にご質問はありますか？",
    timestamp: new Date().toISOString()
  });
});

// エラーハンドリング
app.use((err, req, res, next) => {
  console.error('❌ エラー:', err);
  res.status(500).json({ error: "サーバーエラーが発生しました", details: err.message });
});

// 404ハンドリング
app.use((req, res) => {
  res.status(404).json({ error: "リクエストされたリソースは見つかりませんでした" });
});

// データベース接続とサーバー起動
const startServer = async () => {
  await connectToDB();
  
  app.listen(port, '0.0.0.0', () => {
    console.log(\`🚀 サーバーが起動しました: http://0.0.0.0:\${port}\`);
    console.log(\`📚 API接頭辞: \${fullApiPrefix}\`);
    console.log(\`🌐 CORS設定: \${process.env.CORS_ORIGIN || '*'}\`);
  });
};

startServer().catch(err => {
  console.error('❌ サーバー起動エラー:', err);
  process.exit(1);
});
EOF

# 環境変数
ENV NODE_ENV=production
ENV PORT=8080
ENV API_VERSION=v1
ENV API_PREFIX=/api
ENV SKIP_DB=false
ENV SKIP_DB_ERRORS=false

# ポートの公開
EXPOSE 8080

# アプリケーションの実行
CMD ["node", "index.js"]