name: CD - Deploy to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'shared/**'
      - '.github/workflows/cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - test
          - staging
          - production
      features:
        description: '有効化する機能セット'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - minimal
          - auth,core
          - auth,core,db
      deploy_strategy:
        description: 'デプロイ戦略'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - blue-green
          - canary
      canary_percent:
        description: 'カナリアデプロイの場合のトラフィック割合'
        required: false
        default: '10'
        type: string

jobs:
  # 依存関係インストールと共有パッケージビルド
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install backend dependencies
        run: cd backend && npm ci
      
      - name: Install shared dependencies
        run: cd shared && npm ci
      
      - name: Build shared module
        run: cd shared && npm run build
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            backend/node_modules
            shared/node_modules
            shared/dist
            backend/dist
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  # TypeScriptビルド
  build-typescript:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            backend/node_modules
            shared/node_modules
            shared/dist
            backend/dist
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Run TypeScript typecheck
        run: cd backend && npm run typecheck
      
      - name: Run ESLint
        run: cd backend && npm run lint
      
      - name: Build TypeScript
        run: cd backend && npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-dist
          path: backend/dist

  # JSバックアップバージョンのビルド
  build-js-fallback:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            backend/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Create minimal JavaScript version
        run: |
          cd backend
          [ -f server-minimal.js ] && cp -f server-minimal.js server-minimal.tmp.js
          # バージョン番号を埋め込み
          echo "const VERSION = '$(date +%Y%m%d%H%M%S)';" > server-minimal.js
          [ -f server-minimal.tmp.js ] && cat server-minimal.tmp.js >> server-minimal.js
          [ -f server-minimal.tmp.js ] && rm server-minimal.tmp.js
      
      - name: Upload JS backup artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-minimal
          path: backend/server-minimal.js

  # テスト実行
  test:
    needs: setup
    runs-on: ubuntu-latest
    services:
      # テスト用MongoDBコンテナ
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            backend/node_modules
            shared/node_modules
            shared/dist
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
      
      - name: Run tests
        run: cd backend && npm test
        env:
          DB_URI: mongodb://localhost:27017/patrolmanagement-test
          NODE_ENV: test
      
      - name: Generate coverage report
        run: cd backend && npm run test:coverage
        env:
          DB_URI: mongodb://localhost:27017/patrolmanagement-test
          NODE_ENV: test
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage

  # デプロイ準備
  prepare-deploy:
    needs: [build-typescript, build-js-fallback, test]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-outputs.outputs.image_tag }}
      features: ${{ steps.set-outputs.outputs.features }}
      environment: ${{ steps.set-outputs.outputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download TS build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist
      
      - name: Download JS backup artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-minimal
          path: backend/
      
      - name: Set outputs
        id: set-outputs
        run: |
          # タイムスタンプをバージョンタグとして使用
          echo "image_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          
          # 機能セットを設定
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "features=${{ github.event.inputs.features }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "features=all" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  # Cloud Runへのデプロイ
  deploy-cloud-run:
    needs: prepare-deploy
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare-deploy.outputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download TS build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist
      
      - name: Download JS backup artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-minimal
          path: backend/
      
      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Configure Docker
        run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev
      
      - name: Build and push TS image
        run: |
          export IMAGE_TAG=${{ needs.prepare-deploy.outputs.image_tag }}
          export FEATURES=${{ needs.prepare-deploy.outputs.features }}
          
          # イメージをビルド
          docker build -t asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend:$IMAGE_TAG \
            --build-arg FEATURES=$FEATURES \
            -f backend/Dockerfile.cloudrun \
            ./backend
          
          # GCRにプッシュ
          docker push asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend:$IMAGE_TAG
      
      - name: Build and push JS fallback image
        run: |
          export IMAGE_TAG=${{ needs.prepare-deploy.outputs.image_tag }}-minimal
          
          # イメージをビルド
          docker build -t asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend-minimal:$IMAGE_TAG \
            -f backend/Dockerfile.minimal \
            ./backend
          
          # GCRにプッシュ
          docker push asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend-minimal:$IMAGE_TAG
      
      # 環境変数を設定
      - name: Set environment variables
        id: env_vars
        run: |
          export IMAGE_TAG=${{ needs.prepare-deploy.outputs.image_tag }}
          export FEATURES=${{ needs.prepare-deploy.outputs.features }}
          export SERVICE_NAME=patrolmanagement-backend
          export ENV=${{ needs.prepare-deploy.outputs.environment }}
          export STRATEGY=${{ github.event.inputs.deploy_strategy || 'standard' }}
          
          if [ "$ENV" == "production" ]; then
            export CONFIG_METHOD=secret_manager
            export SERVICE_SUFFIX=""
          else 
            export CONFIG_METHOD=env_file
            export SERVICE_SUFFIX="-$ENV"
          fi
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "FEATURES=$FEATURES" >> $GITHUB_ENV
          echo "SERVICE_NAME=${SERVICE_NAME}${SERVICE_SUFFIX}" >> $GITHUB_ENV
          echo "DEPLOY_ENV=$ENV" >> $GITHUB_ENV
          echo "CONFIG_METHOD=$CONFIG_METHOD" >> $GITHUB_ENV
          echo "DEPLOY_STRATEGY=$STRATEGY" >> $GITHUB_ENV
          
          # カナリアデプロイの場合のトラフィック率
          if [ "$STRATEGY" == "canary" ]; then
            echo "CANARY_PERCENT=${{ github.event.inputs.canary_percent || '10' }}" >> $GITHUB_ENV
          fi
          
          echo "service_name=${SERVICE_NAME}${SERVICE_SUFFIX}" >> $GITHUB_OUTPUT
      
      # スタンダードデプロイ
      - name: Standard deploy to Cloud Run
        if: env.DEPLOY_STRATEGY == 'standard'
        run: |
          # ゼロトラフィックでデプロイ
          gcloud run deploy $SERVICE_NAME \
            --image asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend:$IMAGE_TAG \
            --region asia-northeast1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --tag v$IMAGE_TAG \
            --no-traffic \
            --set-env-vars="FEATURES=$FEATURES,CONFIG_METHOD=$CONFIG_METHOD,DEPLOY_ENV=$DEPLOY_ENV"
          
          # ヘルスチェック
          echo "ヘルスチェック中..."
          HEALTH_URL=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.url)')/healthz?mode=simple
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$HEALTH_CHECK" == "200" ]; then
            echo "ヘルスチェック成功。トラフィックを移動します。"
            # トラフィックを移動
            gcloud run services update-traffic $SERVICE_NAME \
              --region asia-northeast1 \
              --to-revisions v$IMAGE_TAG=100
            echo "デプロイ成功!"
          else
            echo "ヘルスチェック失敗! トラフィックは移動しません。"
            echo "失敗したデプロイのURL: ${HEALTH_URL/healthz\?mode=simple/}"
            exit 1
          fi
      
      # ブルー/グリーンデプロイ
      - name: Blue/Green deploy to Cloud Run
        if: env.DEPLOY_STRATEGY == 'blue-green'
        run: |
          # 新サービスをデプロイ(グリーン環境)
          TEMP_SERVICE="${SERVICE_NAME}-green"
          
          gcloud run deploy $TEMP_SERVICE \
            --image asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend:$IMAGE_TAG \
            --region asia-northeast1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --set-env-vars="FEATURES=$FEATURES,CONFIG_METHOD=$CONFIG_METHOD,DEPLOY_ENV=$DEPLOY_ENV"
          
          # ヘルスチェック
          echo "ヘルスチェック中..."
          HEALTH_URL=$(gcloud run services describe $TEMP_SERVICE --region asia-northeast1 --format='value(status.url)')/healthz?mode=simple
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$HEALTH_CHECK" == "200" ]; then
            echo "ヘルスチェック成功。グリーン環境のデプロイが完了しました。"
            
            # 現在のURLを取得
            CURRENT_URL=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.url)' 2>/dev/null || echo "none")
            NEW_URL=$(gcloud run services describe $TEMP_SERVICE --region asia-northeast1 --format='value(status.url)')
            
            # トラフィックを切り替えるためのカスタムドメインマッピングの更新
            # 注: 実際の環境では、ここでカスタムドメインを更新する必要があります
            echo "新しい環境($TEMP_SERVICE)URL: $NEW_URL"
            echo "現在の環境($SERVICE_NAME)URL: $CURRENT_URL"
            
            if [ "$CURRENT_URL" != "none" ]; then
              echo "旧環境(ブルー)を維持しておきます。確認後に手動で削除してください。"
            fi
          else
            echo "ヘルスチェック失敗! グリーン環境のデプロイに失敗しました。"
            exit 1
          fi
      
      # カナリアデプロイ
      - name: Canary deploy to Cloud Run
        if: env.DEPLOY_STRATEGY == 'canary'
        run: |
          # 新バージョンをデプロイ
          gcloud run deploy $SERVICE_NAME \
            --image asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend:$IMAGE_TAG \
            --region asia-northeast1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --tag v$IMAGE_TAG \
            --no-traffic \
            --set-env-vars="FEATURES=$FEATURES,CONFIG_METHOD=$CONFIG_METHOD,DEPLOY_ENV=$DEPLOY_ENV"
          
          # ヘルスチェック
          echo "ヘルスチェック中..."
          HEALTH_URL=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.url)' | sed "s/^.*\//https:\/\/v$IMAGE_TAG-/")/healthz?mode=simple
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$HEALTH_CHECK" == "200" ]; then
            echo "ヘルスチェック成功。$CANARY_PERCENT%のトラフィックを新バージョンに向けます。"
            
            # 現在のRevisionを取得
            CURRENT_REVISION=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.traffic.revisionName)' | grep -v "v$IMAGE_TAG" | head -1 || echo "")
            
            if [ -z "$CURRENT_REVISION" ]; then
              # 初回デプロイの場合は100%のトラフィックを新バージョンに向ける
              gcloud run services update-traffic $SERVICE_NAME \
                --region asia-northeast1 \
                --to-revisions v$IMAGE_TAG=100
            else
              # カナリアデプロイ: 指定されたパーセンテージのトラフィックを新バージョンに向ける
              REMAINING_PERCENT=$((100 - CANARY_PERCENT))
              gcloud run services update-traffic $SERVICE_NAME \
                --region asia-northeast1 \
                --to-revisions v$IMAGE_TAG=$CANARY_PERCENT,$CURRENT_REVISION=$REMAINING_PERCENT
              
              echo "カナリアデプロイ完了: $CANARY_PERCENT% のトラフィックを新バージョンに向けました。"
              echo "デプロイを完了するには、手動で残りのトラフィックを新バージョンに切り替えてください。"
            fi
          else
            echo "ヘルスチェック失敗! トラフィックは移動しません。"
            exit 1
          fi
      
      # JSバックアップのデプロイ
      - name: Deploy JS backup (minimal mode)
        if: needs.prepare-deploy.outputs.environment == 'production'
        run: |
          export IMAGE_TAG=${{ needs.prepare-deploy.outputs.image_tag }}-minimal
          export SERVICE_NAME=patrolmanagement-minimal
          
          # 本番環境ではSecret Managerを使用
          export CONFIG_METHOD=secret_manager
          
          # ゼロトラフィックでデプロイ
          gcloud run deploy $SERVICE_NAME \
            --image asia-northeast1-docker.pkg.dev/yamatovision-blue-lamp/patrolmanagement/backend-minimal:$IMAGE_TAG \
            --region asia-northeast1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 256Mi \
            --cpu 1 \
            --tag v$IMAGE_TAG \
            --no-traffic \
            --set-env-vars="CONFIG_METHOD=$CONFIG_METHOD"
          
          # ヘルスチェック
          echo "ヘルスチェック中..."
          HEALTH_URL=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.url)')/healthz?mode=simple
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          
          if [ "$HEALTH_CHECK" == "200" ]; then
            echo "ヘルスチェック成功。トラフィックを移動します。"
            # トラフィックを移動
            gcloud run services update-traffic $SERVICE_NAME \
              --region asia-northeast1 \
              --to-revisions v$IMAGE_TAG=100
            echo "JSバックアップデプロイ成功!"
          else
            echo "ヘルスチェック失敗! トラフィックは移動しません。"
            echo "失敗したデプロイのURL: ${HEALTH_URL/healthz\?mode=simple/}"
            exit 1
          fi
      
      # 自動化スモークテスト
      - name: Run smoke tests
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region asia-northeast1 --format='value(status.url)')
          
          echo "スモークテスト実行中..."
          
          # 基本的なヘルスチェック
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/healthz)
          if [ "$HEALTH_CHECK" != "200" ]; then
            echo "ヘルスチェックエンドポイントが失敗しました。"
            exit 1
          fi
          
          # APIが応答するか確認
          API_CHECK=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/api/v1/health)
          if [ "$API_CHECK" != "200" ]; then
            echo "APIヘルスチェックが失敗しました。追加テストが必要です。"
          fi
          
          echo "スモークテスト成功!"
      
      # デプロイステータス通知
      - name: Notify Deployment Status
        run: |
          echo "デプロイ完了"
          echo "環境: ${{ needs.prepare-deploy.outputs.environment }}"
          echo "機能セット: ${{ needs.prepare-deploy.outputs.features }}"
          echo "デプロイ戦略: ${{ github.event.inputs.deploy_strategy || 'standard' }}"
          echo "イメージタグ: ${{ needs.prepare-deploy.outputs.image_tag }}"
          echo "URLを確認: https://${{ steps.env_vars.outputs.service_name }}-235426778039.asia-northeast1.run.app/"
  
  # フロントエンドのデプロイ
  deploy-frontend:
    needs: deploy-cloud-run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: Run TypeScript typecheck
        run: cd frontend && npm run typecheck
      
      - name: Run ESLint
        run: cd frontend && npm run lint
      
      - name: Build frontend
        run: |
          cd frontend
          # バックエンドURLを設定
          echo "REACT_APP_API_URL=https://patrolmanagement-backend-235426778039.asia-northeast1.run.app" > .env.production
          echo "REACT_APP_API_BASE_PATH=/api/v1" >> .env.production
          CI=false npm run build
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Deploy to Firebase
        run: |
          cd frontend
          firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }} --non-interactive
      
      - name: Deployment Summary
        run: |
          echo "フロントエンドデプロイ完了"
          echo "Firebase Hosting URL: https://patrolmanagement.web.app"
          
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-production-build
          path: frontend/build